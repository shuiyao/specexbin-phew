File: ./contsmoothspec.c
================================

66c66
< 
---
> #ifndef PIPELINE
69,72d68
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
<   FILE *phewsfile;
<   char phewsname[80];
< #endif  
76,78d71
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
<   char longphewsname[400];  
< #endif  
81c74
< 
---
> #endif
125,126d117
<   float random_number;
<   float nc_hits;
149a141
> #ifndef PIPELINE
153,155d144
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
<   sprintf(phewsname,"phewszfile.%s.%s",sim_id,namesuffix);
< #endif  
159,161d147
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
<   phewsfile = fopen(phewsname,"w");
< #endif  
167,170d152
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
<   strcat(strcpy(longphewsname, spec_dir), phewsname);
<   phewsfile = fopen(longphewsname,"w");
< #endif  
184,190d165
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
<   if(theta>0){
<     sprintf(phewsname,"phewszfile.%s.%d.%d_%d",sim_id,iname,jname,kname);
<   }else{
<     sprintf(phewsname,"phewszfile.%s.%s.%d_%d",sim_id,id,jname,kname);
<   }
< #endif  
194,196d168
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
<   phewsfile = fopen(phewsname,"a");  
< #endif  
202,205d173
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
<   strcat(strcpy(longphewsname, spec_dir), phewsname);  
<   phewsfile = fopen(longphewsname,"a");  
< #endif  
211c179,180
< #endif // SHORTSPEC
---
> #endif
> #endif
326c295
< #if defined(PHEW) && defined(PHEW_IGNORE_PHEWS)
---
> #ifdef PHEW
411,413c380,381
< #ifdef HDF5FORMAT
< 	  fprintf(partfile,"% 6.4e % 6.4e % 6.4e %6.4e %6.4e %6.4e %6.4e ",cp->mass, cp->rho*XH*unit_Density/(aex*aex*aex)/MHYDR, cp->temp, cp->metals[2], cp->metals[4], cp->metals[7], cp->hsmooth);
< #else
---
> 
> #ifndef PIPELINE
415d382
< #endif	  
418,422c385,387
< #ifdef PHEW	  
< 	  fprintf(partfile," %5.3f %6.4e %d\n", redshift, IonFrac(cp->temp,cp->rho*XH*unit_Density/(aex*aex*aex),0), cp->wind_flag);
< #else
< 	  fprintf(partfile," %5.3f %6.4e\n", redshift, IonFrac(cp->temp,cp->rho*XH*unit_Density/(aex*aex*aex),0));	  
< #endif	  
---
> 	  fprintf(partfile," %5.3f %6.4e\n", redshift, IonFrac(cp->temp,cp->rho*XH*unit_Density/(aex*aex*aex),0)); 
> #endif
> 
510c475
< 	  } // LOOP: n ions
---
> 	  }
745,765c710
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
< 		if(cp -> wind_flag > 0){ // A PhEW particle
< 		  nc_bin = kernel * cp->ncloud * (PI * cp->rcloud * cp->rcloud); // kernel has been normalized by PI * h^2
< 		  /* prob0 = exp(-nc_bin); // k=0 term of the Poisson distribution */
< 		  prob1 = nc_bin * exp(-nc_bin); // k=1 term of the Poisson distribution
< 		  prob2 = nc_bin * nc_bin * exp(-nc_bin) / 2.0; // k=1 term of the Poisson distribution
< 		  // Write prob0, prob1, prob2 to the partzfile ...
< 		  /* random_number = get_random_number(cp->idx + 12); */
< 		  /* idx+12 is not a good seed because it will be the same for a PhEW particle. Physically, the chance of hitting a cloud in each zbin should be calculated independently */
< 		  random_number = get_random_number(cp->idx + (int)(nc_bin * 10000));
< 		  
< 		  if(random_number < prob2) nc_hits = 2.0;
< 		  else if(random_number < prob1) nc_hits = 1.0;
< 		  else nc_hits = 0.0;
< 		  fprintf(phewsfile, "%5.3f %7.5f %6.1f %5.3e %5.3e %5.3e %5.3e %f\n",
< 			  cp->mcloud, cp->delaytime,
< 			  cp->ncloud, cp->rcloud, cp->hsmooth,
< 			  prob1, prob2, nc_hits
< 			  );
< 		}
< #endif		
---
> 
799,806c744
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)
< 		  if(cp -> wind_flag > 0)
< 		    colcloud = nc_hits * cp->rho * 4. / 3. * cp->rcloud * ion_weight;
< 		  else
< 		    colcloud = kernel * ion_weight * cp->mass;
< #else
< 		    colcloud = kernel * ion_weight * cp->mass;		  
< #endif		  
---
> 		  colcloud = kernel * ion_weight * cp->mass;
881,890c819,826
< #ifdef PHEW			
< 			if(cp -> wind_flag > 0)  // A PhEW particle
< #else
< 			if(1 < 0) // Not PhEW, this is not happening
< #endif			 
< 			{
< 			  I.vcbins[vbin] += dvcol*colcloud;
< 			  I.rhocbins[vbin] += dvcol*rhocloud;
< 			  I.tcbins[vbin] += dvcol*tcloud;
< 			  I.Zcbins[vbin] += dvcol*Zcloud;			
---
> 			I.vcbins[vbin] += dvcol*colcloud; // The I.fraction is moved to tau.c
> 
> 			if(I.vcbins[vbin] < 0.0 && ionid == 0){
> 			  fprintf(stderr, "z: %g %d %g %g %g %g %d %d %g %g %g %g\n",
> 				  I.vcbins[vbin], vbin,
> 				  vcloud, voffset[bin+nzloopbins], colcloud, dvcol,
> 				  vbin_min, vbin_max, vbin_coord[vbin], vbin_coord[vbin+1],
> 				  vlower, vupper);
892,907c828,836
< 			else { // A non-PhEW (ambient) particle
< 			  I.vabins[vbin] += dvcol*colcloud; // The I.fraction is moved to tau.c
< 			  if(I.vabins[vbin] < 0.0 && ionid == 0){
< 			    fprintf(stderr, "z: %g %d %g %g %g %g %d %d %g %g %g %g\n",
< 				    I.vabins[vbin], vbin,
< 				    vcloud, voffset[bin+nzloopbins], colcloud, dvcol,
< 				    vbin_min, vbin_max, vbin_coord[vbin], vbin_coord[vbin+1],
< 				    vlower, vupper);
< 			  }
< 			  // ionfrac (but not necessarily atomic fraction) is already in the colcloud
< 			  I.rhoabins[vbin] += dvcol*rhocloud;
< 			  I.tabins[vbin] += dvcol*tcloud;
< 			  I.Zabins[vbin] += dvcol*Zcloud;			
< 			  // norm[bin] = I.vabins[bin]
< 			  // These bins are in v-space
< 			} // cp->wind_flag > 0
---
> 
> 			// ionfrac (but not necessarily atomic fraction) is already in the colcloud
> 			I.rhocbins[vbin] += dvcol*rhocloud;
> 			I.tcbins[vbin] += dvcol*tcloud;
> 			I.Zcbins[vbin] += dvcol*Zcloud;			
> 			// norm[bin] = I.vcbins[bin]
> 			// These bins are in v-space
> 			/* fprintf(stderr, "I[%d]: %d %g %g %g %g %g %g\n", */
> 			/* 	  ionid, vbin, I.vcbins[vbin], I.tcbins[vbin], I.rhocbins[vbin], dvcol, vlower, vupper); */
933a863,865
>     //fprintf(binfile,"# MIN z = %9.7f coord = %9.7f vel = %7.5e temp = %7.5e rho = %7.5e metals = %7.5e mass = %7.5e\n",bin_redshift[nzloopbins],bin_redshift[nzloopbins],IonTotal.vel[nzloopbins],IonTotal.temp[nzloopbins],IonTotal.rho[nzloopbins],IonTotal.metals[0][nzloopbins],IonTotal.mass[nzloopbins]);
>     //fprintf(binfile,"# MAX z = %9.7f coord = %9.7f vel = %7.5e temp = %7.5e rho = %7.5e metals = %7.5e mass = %7.5e\n",bin_redshift[nzloopbins+nzbins-1],bin_redshift[nzloopbins+nzbins-1],IonTotal.vel[nzloopbins+nzbins-1],IonTotal.temp[nzloopbins+nzbins-1],IonTotal.rho[nzloopbins+nzbins-1],IonTotal.metals[0][nzloopbins+nzbins-1],IonTotal.mass[nzloopbins+nzbins-1]);
> 
964a897
> #ifndef PIPELINE
966a900
>       /* 	  fprintf(binfile,"%5d  %9.7f %5.3e % 8.3f % 5.3e % 5.3e % 5.3e % 5.3e % 5.3e % 5.3e % 9.7e %5.3e",i,IonTotal.redshift[i],IonTotal.mass[i], IonTotal.vel[i],IonTotal.temp[i],IonTotal.rho[i],IonTotal.metals[0][i],IonTotal.metals[1][i],IonTotal.metals[2][i],IonTotal.metals[3][i],IonTotal.bincoord[i],IonTotal.binsize[i]); */
972a907,909
> #ifdef DO6IONS 
>       fprintf(binfile," ",Ion[4].mass[i],Ion[4].vel[i],Ion[4].rho[i],Ion[4].temp[i],Ion[4].metals[0][i]);
> #endif
974a912,913
> #endif
> 
975a915
> #ifndef PIPELINE
976a917
> #endif
979a921
> #ifndef PIPELINE
982,984c924
< #if defined(PHEW) && !defined(PHEW_IGNORE_PHEWS)    
<     fclose(phewsfile);
< #endif      
---
> #endif
File: ./contspecexbin.c
================================

32c32
< char sim_id[40];
---
> char sim_id[20];
88d87
< double phew_mcinit;
122,127d120
< #if defined(PHEW) && !defined(PART_BY_PART)
<   fprintf(stderr, "ERROR: PART_BY_PART is required by PHEW!! QUIT!\n");
<   exit(-1);
< #endif
< 
< 
167,170c160
<   sscanf(argv[6],"%d",&direction) ;
< #ifdef PHEW
<   sscanf(argv[7],"%lg",&phew_mcinit) ;  
< #endif  
---
>   if(argc==7) sscanf(argv[6],"%d",&direction) ;
177,179d166
< #ifdef PHEW
<   sscanf(argv[7],"%lg",&phew_mcinit) ;  
< #endif  
201,202c188
<   if(argc>8)
<     {
---
>   if(argc>7){
File: ./cosmo.c
================================

File: ./file_io.c
================================

160,161d159
<     if(i<5)
<       fprintf(stdout, "gp[%d].temp = %g\n", i, gp[i].temp);
182,183c180
<       gp[i].rcloud = P[i].Rcloud * UNIT_L / unit_Tipsy_Length;
<       gp[i].mcloud = P[i].Mcloud;
---
>       gp[i].rcloud = P[i].Rcloud;
186,187c183
< #endif
<       gp[i].delaytime = P[i].LastSFTime;
---
> #endif	  
191,192c187
<       gp[i].ncloud = P[i].Mass * UNIT_M / gheader.HubbleParam /
< 	(phew_mcinit * P[i].Mcloud);
---
>       gp[i].ncloud = 0;
204d198
<       gp[i].mcloud = 0.0;
File: ./finddiff.csh
================================

5c5
< set basename2 = "../specexbin-phew-shortlos/"
---
> set basename2 = "../specexbin_phew/"
File: ./gammln.c
================================

File: ./getspecparticles.c
================================

File: ./initions.c
================================

125,129c125
<       Ion[i].Zcbins = malloc(nvbins*sizeof(double));
<       Ion[i].vabins = malloc(nvbins*sizeof(double));
<       Ion[i].tabins = malloc(nvbins*sizeof(double));
<       Ion[i].rhoabins = malloc(nvbins*sizeof(double));
<       Ion[i].Zabins = malloc(nvbins*sizeof(double));      
---
>       Ion[i].Zcbins = malloc(nvbins*sizeof(double));      
130a127,134
> #ifdef PHYSSPEC
>       Ion[i].sfrbins = malloc(nvbins*sizeof(double));
>       Ion[i].mgalbins = malloc(nvbins*sizeof(double));
>       Ion[i].dgalbins = malloc(nvbins*sizeof(double));
>       Ion[i].agebins = malloc(nvbins*sizeof(double));
>       Ion[i].nrecbins = malloc(nvbins*sizeof(double));
>       Ion[i].vlaunchbins = malloc(nvbins*sizeof(double));
> #endif
157,161c161
<     IonTotal.Zcbins = malloc(nvbins*sizeof(double));
<     IonTotal.vabins = malloc(nvbins*sizeof(double));
<     IonTotal.tabins = malloc(nvbins*sizeof(double));
<     IonTotal.rhoabins = malloc(nvbins*sizeof(double));
<     IonTotal.Zabins = malloc(nvbins*sizeof(double));    
---
>     IonTotal.Zcbins = malloc(nvbins*sizeof(double));    
162a163,170
> #ifdef PHYSSPEC
>     IonTotal.sfrbins = malloc(nvbins*sizeof(double));
>     IonTotal.mgalbins = malloc(nvbins*sizeof(double));
>     IonTotal.dgalbins = malloc(nvbins*sizeof(double));
>     IonTotal.agebins = malloc(nvbins*sizeof(double));
>     IonTotal.nrecbins = malloc(nvbins*sizeof(double));
>     IonTotal.vlaunchbins = malloc(nvbins*sizeof(double));
> #endif
179a188,196
> #ifdef PHYSSPEC
>       Ion[i].sfr = realloc(Ion[i].sfr,(nzloopbins+nzbins)*sizeof(double));
>       Ion[i].wtmass = realloc(Ion[i].wtmass,(nzloopbins+nzbins)*sizeof(double));
>       Ion[i].mgal = realloc(Ion[i].mgal,(nzloopbins+nzbins)*sizeof(double));
>       Ion[i].dgal = realloc(Ion[i].dgal,(nzloopbins+nzbins)*sizeof(double));
>       Ion[i].age = realloc(Ion[i].age,(nzloopbins+nzbins)*sizeof(double));
>       Ion[i].nrec = realloc(Ion[i].nrec,(nzloopbins+nzbins)*sizeof(double));
>       Ion[i].vlaunch = realloc(Ion[i].vlaunch,(nzloopbins+nzbins)*sizeof(double));
> #endif
188,192c205
<       Ion[i].Zcbins = realloc(Ion[i].Zcbins,(nvloopbins+nvbins)*sizeof(double));
<       Ion[i].vabins = realloc(Ion[i].vabins,(nvloopbins+nvbins)*sizeof(double));
<       Ion[i].tabins = realloc(Ion[i].tabins,(nvloopbins+nvbins)*sizeof(double));
<       Ion[i].rhoabins = realloc(Ion[i].rhoabins,(nvloopbins+nvbins)*sizeof(double));
<       Ion[i].Zabins = realloc(Ion[i].Zabins,(nvloopbins+nvbins)*sizeof(double));      
---
>       Ion[i].Zcbins = realloc(Ion[i].Zcbins,(nvloopbins+nvbins)*sizeof(double));      
193a207,214
> #ifdef PHYSSPEC
>       Ion[i].sfrbins = realloc(Ion[i].sfrbins,(nvloopbins+nvbins)*sizeof(double));
>       Ion[i].mgalbins = realloc(Ion[i].mgalbins,(nvloopbins+nvbins)*sizeof(double));
>       Ion[i].dgalbins = realloc(Ion[i].dgalbins,(nvloopbins+nvbins)*sizeof(double));
>       Ion[i].agebins = realloc(Ion[i].agebins,(nvloopbins+nvbins)*sizeof(double));
>       Ion[i].nrecbins = realloc(Ion[i].nrecbins,(nvloopbins+nvbins)*sizeof(double));
>       Ion[i].vlaunchbins = realloc(Ion[i].vlaunchbins,(nvloopbins+nvbins)*sizeof(double));
> #endif
199a221,229
> #ifdef PHYSSPEC
>     IonTotal.sfr = realloc(IonTotal.sfr,(nzloopbins+nzbins)*sizeof(double));
>     IonTotal.wtmass = realloc(IonTotal.wtmass,(nzloopbins+nzbins)*sizeof(double));
>     IonTotal.mgal = realloc(IonTotal.mgal,(nzloopbins+nzbins)*sizeof(double));
>     IonTotal.dgal = realloc(IonTotal.dgal,(nzloopbins+nzbins)*sizeof(double));
>     IonTotal.age = realloc(IonTotal.age,(nzloopbins+nzbins)*sizeof(double));
>     IonTotal.nrec = realloc(IonTotal.nrec,(nzloopbins+nzbins)*sizeof(double));
>     IonTotal.vlaunch = realloc(IonTotal.vlaunch,(nzloopbins+nzbins)*sizeof(double));
> #endif
210,214c240
<     IonTotal.Zcbins = realloc(IonTotal.Zcbins,(nvloopbins+nvbins)*sizeof(double));
<     IonTotal.vabins = realloc(IonTotal.vabins,(nvloopbins+nvbins)*sizeof(double));
<     IonTotal.tabins = realloc(IonTotal.tabins,(nvloopbins+nvbins)*sizeof(double));
<     IonTotal.rhoabins = realloc(IonTotal.rhoabins,(nvloopbins+nvbins)*sizeof(double));
<     IonTotal.Zabins = realloc(IonTotal.Zabins,(nvloopbins+nvbins)*sizeof(double));    
---
>     IonTotal.Zcbins = realloc(IonTotal.Zcbins,(nvloopbins+nvbins)*sizeof(double));    
224a251,258
> #ifdef PHYSSPEC
>     IonTotal.sfrbins = realloc(IonTotal.sfrbins,(nvloopbins+nvbins)*sizeof(double));
>     IonTotal.mgalbins = realloc(IonTotal.mgalbins,(nvloopbins+nvbins)*sizeof(double));
>     IonTotal.dgalbins = realloc(IonTotal.dgalbins,(nvloopbins+nvbins)*sizeof(double));
>     IonTotal.agebins = realloc(IonTotal.agebins,(nvloopbins+nvbins)*sizeof(double));
>     IonTotal.nrecbins = realloc(IonTotal.nrecbins,(nvloopbins+nvbins)*sizeof(double));
>     IonTotal.vlaunchbins = realloc(IonTotal.vlaunchbins,(nvloopbins+nvbins)*sizeof(double));
> #endif
231d264
<       IonTotal.vabins[i] = IonTotal.tabins[i] = IonTotal.rhoabins[i] = IonTotal.Zabins[i] = 0.0;      
234d266
< 	Ion[j].vabins[i] = Ion[j].tabins[i] = Ion[j].rhoabins[i] = Ion[j].Zabins[i] = 0.0;
239d270
<     IonTotal.vabins[i] = IonTotal.tabins[i] = IonTotal.rhoabins[i] = IonTotal.Zabins[i] = 0.0;    
242d272
<       Ion[j].vabins[i] = Ion[j].tabins[i] = Ion[j].rhoabins[i] = Ion[j].Zabins[i] = 0.0; 
245c275
<   fprintf(stderr, "=== Update Ion.vcbins/vabins From %d to %d ===\n", nvloopbins, nvloopbins+nvbins);
---
>   fprintf(stderr, "=== Update Ion.vcbins From %d to %d ===\n", nvloopbins, nvloopbins+nvbins);
287,291c317
<     free(Ion[i].Zcbins);
<     free(Ion[i].vabins);
<     free(Ion[i].rhoabins);
<     free(Ion[i].tabins);
<     free(Ion[i].Zabins);        
---
>     free(Ion[i].Zcbins);        
309,313c335
<   free(IonTotal.Zcbins);
<   free(IonTotal.vabins);
<   free(IonTotal.rhoabins);
<   free(IonTotal.tabins);
<   free(IonTotal.Zabins);      
---
>   free(IonTotal.Zcbins);      
File: ./intaufact.c
================================

File: ./ionfrac.c
================================

File: ./loadhdf5.c
================================

349c349
<       P[i].Rcloud = single[cnt];
---
>       P[i].Mcloud = single[cnt];
File: ./makespectab.c
================================

File: ./outtau.c
================================

47c47,53
< #ifndef PART_BY_PART
---
> #ifdef PIPELINE
>   if(theta>0){
>     sprintf(fname,"spectau.%s.%d.z%d_%d",sim_id,iname,jname,kname);
>   }else{
>     sprintf(fname,"spectau.%s.%s.z%d_%d",sim_id,id,jname,kname);
>   }
> #else
56a63
> #endif
101a109,111
> #ifdef PIPELINE
> 	  fprintf(outfile, "%5.3e ",Ion[k].vbins[i]);
> #else
102a113
> #endif
104a116
> #ifndef PIPELINE
105a118
> #endif
111,114d123
< #endif // #ifndef PART_BY_PART
< 
<   /* <<<<<<<< SMOOTH METHOD */
<   /* >>>>>>>> P-P METHOD */
116c125,126
< #ifdef PART_BY_PART 
---
> #ifdef PHEW_CLOUDS
>   // The format is exactly the same as specztau or specaim. Only contains wind information
118c128
<   sprintf(fname,"specaimw.%s.%s",sim_id,namesuffix);
---
>   sprintf(fname,"specaimc.%s.%s",sim_id,namesuffix);
121c131
<     sprintf(fname,"specztauw.%s.%d.%d_%d",sim_id,iname,jname,kname);
---
>     sprintf(fname,"specztauc.%s.%d.%d_%d",sim_id,iname,jname,kname);
123c133
<     sprintf(fname,"specztauw.%s.%s.%d_%d",sim_id,id,jname,kname);
---
>     sprintf(fname,"specztauc.%s.%s.%d_%d",sim_id,id,jname,kname);
133c143
<   fprintf(stderr,"Outputting in Spectau (P-P)!!!!\n");
---
>   fprintf(stderr,"Outputting in Spectau (Clouds)!!!!\n");
140d149
<       /* Only write within the z boundary. (Exclude z < 0 for example) */
142d150
<       /* fprintf(outfile, "%d ",i); */
152,162c160,170
<           IonTotal.rhoabins[i] = log10(IonTotal.rhoabins[i]/rhomean);
<           IonTotal.tabins[i] = log10(IonTotal.tabins[i]);
< 	  if(isnan(IonTotal.rhoabins[i]) || isinf(IonTotal.rhoabins[i])) IonTotal.rhoabins[i] = 0.0;
< 	  if(isnan(IonTotal.tabins[i]) || isinf(IonTotal.tabins[i])) IonTotal.tabins[i] = 0.0;
< 	}else{
< 	  Ion[k].rhoabins[i] = log10(Ion[k].rhoabins[i]/rhomean);
< 	  Ion[k].tabins[i] = log10(Ion[k].tabins[i]);
< 	  if(isnan(Ion[k].rhoabins[i]) || isinf(Ion[k].rhoabins[i])) Ion[k].rhoabins[i] = 0.0;
< 	  if(isnan(Ion[k].tabins[i]) || isinf(Ion[k].tabins[i])) Ion[k].tabins[i] = 0.0;
< 	  if(isnan(Ion[k].Zabins[i]) || isinf(Ion[k].Zabins[i])) Ion[k].Zabins[i] = 0.0;
< 	  if(isnan(Ion[k].vabins[i]) || isinf(Ion[k].vabins[i])) Ion[k].vabins[i] = 0.0;
---
>           IonTotal.rhocbins[i] = log10(IonTotal.rhocbins[i]/rhomean);
>           IonTotal.tcbins[i] = log10(IonTotal.tcbins[i]);
> 	  if(isnan(IonTotal.rhocbins[i]) || isinf(IonTotal.rhocbins[i])) IonTotal.rhocbins[i] = 0.0;
> 	  if(isnan(IonTotal.tcbins[i]) || isinf(IonTotal.tcbins[i])) IonTotal.tcbins[i] = 0.0;
> 	}else{
> 	  Ion[k].rhocbins[i] = log10(Ion[k].rhocbins[i]/rhomean);
> 	  Ion[k].tcbins[i] = log10(Ion[k].tcbins[i]);
> 	  if(isnan(Ion[k].rhocbins[i]) || isinf(Ion[k].rhocbins[i])) Ion[k].rhocbins[i] = 0.0;
> 	  if(isnan(Ion[k].tcbins[i]) || isinf(Ion[k].tcbins[i])) Ion[k].tcbins[i] = 0.0;
> 	  /* if(isnan(Ion[k].Zcbins[i]) || isinf(Ion[k].Zcbins[i])) Ion[k].Zcbins[i] = 0.0; */
> 	  if(isnan(Ion[k].vcbins[i]) || isinf(Ion[k].vcbins[i])) Ion[k].vcbins[i] = 0.0;
165c173
< 	  fprintf(outfile, "% 6.3f %6.3f %5.3e ", IonTotal.rhoabins[i],IonTotal.tabins[i],IonTotal.Zabins[i]);
---
> 	  fprintf(outfile, "% 6.3f %6.3f 0.0 ", IonTotal.rhocbins[i],IonTotal.tcbins[i]);
167c175
< 	  fprintf(outfile, "% 5.2f %5.2f %5.3e %5.3e ", Ion[k].rhoabins[i],Ion[k].tabins[i],Ion[k].Zabins[i],Ion[k].vabins[i]);
---
> 	  fprintf(outfile, "% 5.2f %5.2f 0.0 %5.3e ", Ion[k].rhocbins[i],Ion[k].tcbins[i],Ion[k].vcbins[i]);
170c178
<       /* fprintf(outfile,"% 7.5f % 7.5f % 7.5f",IonExtra.xbins[i],IonExtra.ybins[i],IonExtra.zbins[i]); */
---
>       fprintf(outfile,"% 7.5f % 7.5f % 7.5f",IonExtra.xbins[i],IonExtra.ybins[i],IonExtra.zbins[i]);
176,177c184
<   fprintf(stderr, "SUCCESSFUL! Done Writting....\n");
< #endif // PART_BY_PART
---
> #endif // PHEW
179,180c186,187
< #ifdef PHEW
<   // The format is exactly the same as specztau or specaim. Only contains cloud information
---
> #ifdef PART_BY_PART 
>   // The format is exactly the same as specztau or specaim. Only contains wind information
182c189
<   sprintf(fname,"specaimc.%s.%s",sim_id,namesuffix);
---
>   sprintf(fname,"specaimw.%s.%s",sim_id,namesuffix);
185c192
<     sprintf(fname,"specztauc.%s.%d.%d_%d",sim_id,iname,jname,kname);
---
>     sprintf(fname,"specztauw.%s.%d.%d_%d",sim_id,iname,jname,kname);
187c194
<     sprintf(fname,"specztauc.%s.%s.%d_%d",sim_id,id,jname,kname);
---
>     sprintf(fname,"specztauw.%s.%s.%d_%d",sim_id,id,jname,kname);
197c204
<   fprintf(stderr,"Outputting in Spectau (Clouds)!!!!\n");
---
>   fprintf(stderr,"Outputting in Spectau (Winds)!!!!\n");
214a222
> #ifndef PHEW_CLOUDS	
227a236
> #endif	
232a242,246
>       /* if(k == 0) */
>       /* 	if(Ion[k].vcbins[i] < 0.0 || (Ion[k].vcbins[i] > 0.0 && Ion[k].vcbins[i] < 1.e-30)){ */
>       /* 	  fprintf(stderr, "STRANGE BIN: Ion[0].vcbins[%d] = %g\n", */
>       /* 		  i, Ion[0].vcbins[i]); */
>       /* 	} */
234c248
<       /* fprintf(outfile,"% 7.5f % 7.5f % 7.5f",IonExtra.xbins[i],IonExtra.ybins[i],IonExtra.zbins[i]); */
---
>       fprintf(outfile,"% 7.5f % 7.5f % 7.5f",IonExtra.xbins[i],IonExtra.ybins[i],IonExtra.zbins[i]);
239c253
<   fclose(outfile); // specztauc or specaimc
---
>   fclose(outfile); // specztau or specaim
241c255
< #endif // PHEW
---
> #endif // PART_BY_PART
File: ./poidev.c
================================

File: ./ran1.c
================================

File: ./tau.c
================================

460,465c460
< 	IonTotal.Zcbins[i] /= IonTotal.vcbins[i];
<       }
<       if(IonTotal.vabins[i] > 0){      
< 	IonTotal.tabins[i] /= IonTotal.vabins[i];
< 	IonTotal.rhoabins[i] /= IonTotal.vabins[i];
< 	IonTotal.Zabins[i] /= IonTotal.vabins[i];	
---
> 	IonTotal.Zcbins[i] /= IonTotal.vcbins[i];	
473,475d467
<       IonTotal.vabins[i] *= 0.0122;
<       IonTotal.vabins[i] *= unit_col;
<       IonTotal.vabins[i] *= unit_Mass/Ion[0].atomwt;
481,486c473
< 	  Ion[k].Zcbins[i] /= Ion[k].vcbins[i];
< 	}
< 	if(Ion[k].vabins[i] > 0){
< 	  Ion[k].tabins[i] /= Ion[k].vabins[i];
< 	  Ion[k].rhoabins[i] /= Ion[k].vabins[i];
< 	  Ion[k].Zabins[i] /= Ion[k].vabins[i];	  
---
> 	  Ion[k].Zcbins[i] /= Ion[k].vcbins[i];	  
495,497d481
< 	if(Ion[k].Zcolumn == -1) Ion[k].vabins[i] *= Ion[k].fraction;
< 	Ion[k].vabins[i] *= unit_col;
< 	Ion[k].vabins[i] *= unit_Mass/Ion[k].atomwt;
File: ./taudecdens.c
================================

File: mkspecRAD.c
================================

File: finddiff.csh
================================

5c5
< set basename2 = "../specexbin-phew-shortlos/"
---
> set basename2 = "../specexbin_phew/"
File: mkspecRAD.c
================================

File: ./defs.h
================================

File: ./extern.h
================================

12,15c12
< 
< extern double phew_mcinit; 	/* Initialized in cmd */
< #endif // PHEW
< 
---
> #endif
17c14
< char sim_id[40];
---
> char sim_id[20];
File: ./gadgetdefs.h
================================

File: ./iontab.h
================================

File: ./loadhdf5.h
================================

File: ./nr.h
================================

File: ./nrutil.h
================================

File: ./owls.h
================================

File: ./proto.h
================================

File: ./specexbindefs.h
================================

4,7d3
< 
< #ifdef SHORTSPEC
< #define FOLDER_OUTPUT "/proj/shuiyao/los/shortlos/temp/"
< #else
9d4
< #endif
83d77
<   Real mcloud;
111,114d104
<   double *vabins;
<   double *tabins;
<   double *rhoabins;
<   double *Zabins;
File: ./tipsydefs.h
================================

File: vpdefs.h
================================

File: vpdefs.h
================================

